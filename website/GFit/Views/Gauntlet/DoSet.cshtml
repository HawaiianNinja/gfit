@using gFit.Models.ViewModels
@model gFit.Models.Composite.GauntletParticipation

@{
    ViewBag.Title = "Gauntlet Status";
}

@section BackButton{
    data-add-back-btn="true"
}

@section Content
{



    <div class="content-tile-base">




        <div style="display: inline-block; vertical-align: top">
            @{
                var data = "<span class=\"minutes\" data-bind=\"text: minutes\"></span><span class=\"seconds\" data-bind=\"text: seconds\"></span>";
                Html.RenderPartial("_DataTilePartial", new DataVM(data, "Timer"));
            }
        </div>


        <div class="left-bar-yellow">




            <div class="line-item">
                <span class="item-title">Activity:</span><span class="item-value">@Model.Gauntlet.Excercise</span>
            </div>
            <div class="line-item">
                <span class="item-title">Total Reps:</span><span class="item-value">@Model.Gauntlet.Reps</span>
            </div>
            <div class="line-item">
                <span class="item-title">Reps Done:</span><span class="item-value">@Model.TotalRepsCompleted</span>
            </div>
            <div class="line-item">
                <span class="item-title">Reps Left:</span><span class="item-value">@Model.RepsLeft</span>
            </div>
        </div>

    </div>







    @using (Html.BeginForm("DoSetPostBack", "Gauntlet", new {id = Model.Gauntlet.Id}, FormMethod.Post, new {id = "formId"}))
    {
        @Html.Hidden("id", @Model.Gauntlet.Id)
        @Html.AntiForgeryToken()

        <div class="content-tile-base">

            <div class="content-tile-title">Reps:</div>

            <input type="range"
                   data-inline="false"
                   name="numReps" 
                   id="repsSlider" 
                   min="1" 
                   max="@Model.RepsLeft" 
                   data-highlight="true"
                   value="1"/>

        </div>

        <span style="font-size: 12px">Go do some reps, when you are done adjust the slider above then click "Save" at the bottom.
        </span>
    }
}




@section Footer
{
    <div class="center-wrapper">
        <a data-role="button" data-inline="true" href="@Url.Action("DeleteSet", "Gauntlet", new {id = Model.Gauntlet.Id, setGuid = Model.IncompleteSet.Guid})">Discard</a>
        <a data-role="button" data-inline="true" onclick=" $('#formId').submit(); ">Save</a>
    </div>

}




@section Scripts
{

    @Scripts.Render("~/bundles/knockout")
    <script>

        function getSmallerDate() {
            var now = new Date();
            var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());

            var startDate = new Date("@Model.IncompleteSet.StartTime");

            if (now_utc.getTime() < startDate.getTime()) {
                return now_utc;
            }
            return startDate;
        }


        function AppViewModel() {

            //timer bindings
            var _dummy = ko.observable();
            var startDate = new Date(getSmallerDate());
            this.minutes = ko.observable();
            this.seconds = ko.observable();


            this.minutes = ko.computed(function() {
                _dummy();

                var now = new Date();
                var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());


                if (now_utc.getTime() < startDate.getTime()) {
                    startDate = now_utc;
                }


                var hour = Math.floor((now_utc.getTime() - startDate.getTime()) / (1000 * 60 * 60));
                var min = Math.floor(((now_utc.getTime() - startDate.getTime()) / (1000 * 60)) % 60);
                var sec = Math.floor(((now_utc.getTime() - startDate.getTime()) / (1000)) % 60);


                var returnVar = 0;

                if (hour > 0) {
                    returnVar = hour;
                } else if (min > 0) {
                    returnVar = min;
                } else {
                    returnVar = sec;
                }

                if (returnVar < 10) {
                    returnVar = "0" + Math.abs(returnVar);
                }

                return returnVar;

            }, this);


            this.seconds = ko.computed(function() {
                _dummy();

                var now = new Date();
                var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds());

                if (now_utc.getTime() < startDate.getTime()) {
                    startDate = now_utc;
                }

                var hour = Math.floor((now_utc.getTime() - startDate.getTime()) / (1000 * 60 * 60));
                var min = Math.floor(((now_utc.getTime() - startDate.getTime()) / (1000 * 60)) % 60);
                var sec = Math.floor(((now_utc.getTime() - startDate.getTime()) / (1000)) % 60);
                var decsec = Math.floor(((now_utc.getTime() - startDate.getTime()) / (10)) % 100);

                var returnVar = 0;

                if (hour > 0) {
                    returnVar = min;
                } else if (min > 0) {
                    returnVar = sec;
                } else {
                    returnVar = decsec;
                }

                if (returnVar < 10) {
                    returnVar = "0" + Math.abs(returnVar);
                }

                return returnVar;

            }, this);


            this.poke = function() {
                _dummy.notifySubscribers();
            };
        }

        var vm = new AppViewModel();

        setInterval(function() {
            vm.poke();
        }, 10);

        ko.applyBindings(vm);

    </script>


}