/*
Deployment script for GFitDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GFitDB"
:setvar DefaultFilePrefix "GFitDB"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[ACCOUNT_HAS_OAUTH]...';


GO
CREATE TABLE [dbo].[ACCOUNT_HAS_OAUTH] (
    [account_id]  INT            NOT NULL,
    [provider_id] INT            NOT NULL,
    [authToken]   NVARCHAR (MAX) NOT NULL,
    [uid]         NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_ACCOUNT_HAS_OAUTH] PRIMARY KEY CLUSTERED ([account_id] ASC, [provider_id] ASC)
);


GO
PRINT N'Creating [dbo].[ACCOUNTS]...';


GO
CREATE TABLE [dbo].[ACCOUNTS] (
    [id]               INT            IDENTITY (1, 1) NOT NULL,
    [oAuth]            BIT            NOT NULL,
    [username]         NVARCHAR (32)  NOT NULL,
    [password]         NVARCHAR (256) NULL,
    [firstName]        NVARCHAR (64)  NULL,
    [lastName]         NVARCHAR (64)  NULL,
    [dob]              DATE           NULL,
    [gender]           NVARCHAR (16)  NULL,
    [dateCreated]      DATETIME2 (7)  NOT NULL,
    [dateLastAccessed] DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK__ACCOUNTS__3213E83F6B869F75] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ACCOUNTS].[IX_USERS_username]...';


GO
CREATE NONCLUSTERED INDEX [IX_USERS_username]
    ON [dbo].[ACCOUNTS]([username] ASC);


GO
PRINT N'Creating [dbo].[GAUNTLET_SETS]...';


GO
CREATE TABLE [dbo].[GAUNTLET_SETS] (
    [row_guid]    UNIQUEIDENTIFIER NOT NULL,
    [set_id]      INT              NOT NULL,
    [account_id]  INT              NOT NULL,
    [gauntlet_id] INT              NOT NULL,
    [num_reps]    INT              NOT NULL,
    [start_time]  DATETIME2 (7)    NOT NULL,
    [end_time]    DATETIME2 (7)    NULL,
    [completed]   BIT              NOT NULL,
    CONSTRAINT [PK_GAUNTLET_SETS] PRIMARY KEY CLUSTERED ([set_id] ASC, [account_id] ASC, [gauntlet_id] ASC)
);


GO
PRINT N'Creating [dbo].[GFIT_GAUNTLETS]...';


GO
CREATE TABLE [dbo].[GFIT_GAUNTLETS] (
    [id]            INT            IDENTITY (1, 1) NOT NULL,
    [excercise]     NVARCHAR (256) NOT NULL,
    [reps]          INT            NOT NULL,
    [difficulty]    INT            NOT NULL,
    [date_created]  DATETIME2 (7)  NOT NULL,
    [date_assigned] DATE           NOT NULL,
    CONSTRAINT [PK_GFitGauntlets] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[GFIT_LOG]...';


GO
CREATE TABLE [dbo].[GFIT_LOG] (
    [id]         INT            IDENTITY (1, 1) NOT NULL,
    [log_text]   NVARCHAR (MAX) NOT NULL,
    [date_added] DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_GFIT_LOG] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[OAUTH_PROVIDERS]...';


GO
CREATE TABLE [dbo].[OAUTH_PROVIDERS] (
    [id]            INT           IDENTITY (1, 1) NOT NULL,
    [provider_name] NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_OAUTH_PROVIDERS] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating DF__ACCOUNTS__dateCr__1273C1CD...';


GO
ALTER TABLE [dbo].[ACCOUNTS]
    ADD CONSTRAINT [DF__ACCOUNTS__dateCr__1273C1CD] DEFAULT (getdate()) FOR [dateCreated];


GO
PRINT N'Creating DF__ACCOUNTS__dateLa__1367E606...';


GO
ALTER TABLE [dbo].[ACCOUNTS]
    ADD CONSTRAINT [DF__ACCOUNTS__dateLa__1367E606] DEFAULT (getdate()) FOR [dateLastAccessed];


GO
PRINT N'Creating DF_GAUNTLET_SETS_row_guid...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS]
    ADD CONSTRAINT [DF_GAUNTLET_SETS_row_guid] DEFAULT (newid()) FOR [row_guid];


GO
PRINT N'Creating DF_GAUNTLET_SETS_numberOfReps...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS]
    ADD CONSTRAINT [DF_GAUNTLET_SETS_numberOfReps] DEFAULT ((0)) FOR [num_reps];


GO
PRINT N'Creating DF_GAUNTLET_SETS_startTime...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS]
    ADD CONSTRAINT [DF_GAUNTLET_SETS_startTime] DEFAULT (getdate()) FOR [start_time];


GO
PRINT N'Creating DF_GAUNTLET_SETS_completed...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS]
    ADD CONSTRAINT [DF_GAUNTLET_SETS_completed] DEFAULT ((0)) FOR [completed];


GO
PRINT N'Creating DF_GFIT_LOG_date_added...';


GO
ALTER TABLE [dbo].[GFIT_LOG]
    ADD CONSTRAINT [DF_GFIT_LOG_date_added] DEFAULT (getdate()) FOR [date_added];


GO
PRINT N'Creating FK_ACCOUNT_HAS_OAUTH_ACCOUNTS...';


GO
ALTER TABLE [dbo].[ACCOUNT_HAS_OAUTH] WITH NOCHECK
    ADD CONSTRAINT [FK_ACCOUNT_HAS_OAUTH_ACCOUNTS] FOREIGN KEY ([account_id]) REFERENCES [dbo].[ACCOUNTS] ([id]);


GO
PRINT N'Creating FK_ACCOUNT_HAS_OAUTH_OAUTH_PROVIDERS...';


GO
ALTER TABLE [dbo].[ACCOUNT_HAS_OAUTH] WITH NOCHECK
    ADD CONSTRAINT [FK_ACCOUNT_HAS_OAUTH_OAUTH_PROVIDERS] FOREIGN KEY ([provider_id]) REFERENCES [dbo].[OAUTH_PROVIDERS] ([id]);


GO
PRINT N'Creating FK_GAUNTLET_SETS_ACCOUNTS...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS] WITH NOCHECK
    ADD CONSTRAINT [FK_GAUNTLET_SETS_ACCOUNTS] FOREIGN KEY ([account_id]) REFERENCES [dbo].[ACCOUNTS] ([id]);


GO
PRINT N'Creating FK_GAUNTLET_SETS_GFIT_GAUNTLETS...';


GO
ALTER TABLE [dbo].[GAUNTLET_SETS] WITH NOCHECK
    ADD CONSTRAINT [FK_GAUNTLET_SETS_GFIT_GAUNTLETS] FOREIGN KEY ([gauntlet_id]) REFERENCES [dbo].[GFIT_GAUNTLETS] ([id]);


GO
PRINT N'Creating [dbo].[V_USERS_WITH_PROVIDERS]...';


GO

CREATE VIEW [dbo].[V_USERS_WITH_PROVIDERS]
AS

SELECT 
	A.id as [account_id],
	A.oAuth,
	A.username,
	A.password,
	A.firstName,
	A.lastName,
	A.dob,
	A.gender,
	P.id as [provider_id],
	P.provider_name as [provider_name] ,
	AHO.authToken,
	AHO.uid,
	A.dateCreated,
	A.dateLastAccessed



	FROM ACCOUNTS A
	LEFT OUTER JOIN ACCOUNT_HAS_OAUTH AHO on (A.id = AHO.account_id)
	Left Outer JOIN OAUTH_PROVIDERS P on (P.id = AHO.provider_id)
GO
PRINT N'Creating [dbo].[V_SETS]...';


GO
CREATE VIEW V_SETS

AS

SELECT 

	--set stuff
	S.set_id,
	S.num_reps,
	S.start_time,
	S.end_time,
	S.completed,


	--gauntlet stuff
	S.gauntlet_id,
	G.excercise,


	--account stuff
	V.account_id,
	V.username,
	V.uid

	    

FROM dbo.GAUNTLET_SETS S
	INNER JOIN dbo.GFIT_GAUNTLETS G ON (S.gauntlet_id = G.id)  
	INNER JOIN dbo.V_USERS_WITH_PROVIDERS V ON S.account_id = V.account_id
GO
PRINT N'Creating [dbo].[usp_addAccount]...';


GO


CREATE PROCEDURE [dbo].[usp_addAccount]
	
	--login method
	@oAuth bit = 1,

	--local stuff
	@username nvarchar(32) = null,
	@password nvarchar(256) = null,
	@firstname nvarchar(64) = null,
	@lastname nvarchar(64) = null,
	@dob date = null,
	@gender nvarchar(16) = null,

	--oAUTH stuff
	@provider_name nvarchar(64) = 'FACEBOOK',
	@authToken nvarchar(MAX) = null,
	@uid nvarchar(MAX) = null
	

AS
BEGIN


	IF (@oAuth = 1)
	BEGIN
	
		--check that we support the provider
		IF ((SELECT COUNT(*) FROM OAUTH_PROVIDERS P WHERE P.provider_name = @provider_name) = 0)
		BEGIN
			PRINT 'PROVIDER ' + @provider_name + ' IS NOT IN THE OAUTH_PROVIERS TABLE'
			RETURN -1;
		END

		--check that the username isn't null
		IF (@username IS NULL)
		BEGIN
			PRINT '@username CANNOT BE NULL';
		END

		--check that the username isn't currently used (if it is start adding nubmers)
		DECLARE @i int = 1;
		WHILE (SELECT COUNT(*) FROM ACCOUNTS A WHERE A.username = @username) <> 0
		BEGIN
			SET @username = @username + CONVERT(nvarchar(2),@i)
			SET @i = @i + 1
		END


		--grab the ID of the provider
		DECLARE @provider_id int
		SELECT @provider_id = id FROM OAUTH_PROVIDERS P WHERE P.provider_name=@provider_name


		--checks are done do insert
		BEGIN TRANSACTION

			INSERT INTO ACCOUNTS(oAuth, username, password, firstname, lastname, dob, gender)
			VALUES
			(@oAuth,@username, @password, @firstname, @lastname, @dob, @gender)


			INSERT INTO ACCOUNT_HAS_OAUTH (account_id, provider_id, uid, authToken)
			VALUES
			((SELECT id from ACCOUNTS A WHERE username = @username),
			 @provider_id, @uid, @authToken)
			
		COMMIT TRANSACTION 

		RETURN @@ERROR	
		
	END
	ELSE
	BEGIN
		PRINT 'CURRENTLY NON-OAUTH AUTHENTICATION IS NOT IMPLEMENTED'
		RETURN -1;
	END


END
GO
PRINT N'Creating [dbo].[usp_addToLog]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE usp_addToLog 
	@log_text nvarchar(max) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO GFIT_LOG (log_text) values (@log_text)
END
GO
PRINT N'Creating [dbo].[usp_deleteAccount]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.usp_deleteAccount
	@id int = null
AS
BEGIN

	if(@id IS NULL)
	BEGIN
		PRINT '@id CANNOT BE NULL'
		RETURN -1
	END

	ELSE
	BEGIN
	
		BEGIN TRANSACTION

		--delete records linking the account to a provider
		DELETE FROM ACCOUNT_HAS_OAUTH
		WHERE account_id = @id

		DELETE FROM ACCOUNTS
		WHERE id = @id

		COMMIT TRANSACTION
		
	
	END	



END
GO
PRINT N'Creating [dbo].[usp_getAccountByAccountID]...';


GO



CREATE PROCEDURE [dbo].[usp_getAccountByAccountID]
	@id int = null
AS

	IF @id IS NULL
	BEGIN
		PRINT '@FacebookUid CANNOT BE NULL'
		RETURN -1
	END
	ELSE
	BEGIN


	SELECT 
		V.account_id,
		V.username,
		V.password,
		V.firstName,
		V.lastName,
		V.dob,
		V.gender,
		V.provider_name,
		V.authToken,
		V.uid
	FROM V_USERS_WITH_PROVIDERS V
	WHERE V.account_id = @id

	RETURN @@ERROR

	END
GO
PRINT N'Creating [dbo].[usp_getAccountByOAuthUid]...';


GO


CREATE PROCEDURE [dbo].[usp_getAccountByOAuthUid]
	@Uid nvarchar(MAX) = null
AS

	IF @Uid IS NULL
	BEGIN
		PRINT '@FacebookUid CANNOT BE NULL'
		RETURN -1
	END
	ELSE
	BEGIN


	SELECT 
		V.account_id,
		V.username,
		V.password,
		V.firstName,
		V.lastName,
		V.dob,
		V.gender,
		V.provider_name,
		V.authToken,
		V.uid
	FROM V_USERS_WITH_PROVIDERS V
	WHERE V.uid = @Uid

	RETURN @@ERROR

	END
GO
PRINT N'Creating [dbo].[usp_getGauntletByDate]...';


GO


CREATE PROCEDURE [dbo].[usp_getGauntletByDate]
	@date date = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF(@date IS NULL)
	BEGIN
		SET @date = GETDATE()
	END







   SELECT 
		G.id,
		G.excercise,
		G.reps,
		G.difficulty,
		G.date_created,
		G.date_assigned

   FROM GFIT_GAUNTLETS G
   --NOTE: Add this
   --WHERE date_assigned = @date



END
GO
PRINT N'Creating [dbo].[usp_getGauntletById]...';


GO

CREATE PROCEDURE dbo.usp_getGauntletById
	@gauntlet_id int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   
   SELECT 
		G.id,
		G.excercise,
		G.reps,
		G.difficulty,
		G.date_created,
		G.date_assigned

   FROM GFIT_GAUNTLETS G
   WHERE id = @gauntlet_id



END
GO
PRINT N'Creating [dbo].[usp_getGauntletSetById]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.usp_getGauntletSetById
	@set_id int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    
	IF (@set_id IS NULL)
	BEGIN
		PRINT '@set_id CANNOT BE NULL'
		RETURN -1
	END
	

	SELECT 
		G.set_id,
		G.account_id,
		G.gauntlet_id,
		G.num_reps,
		G.start_time,
		G.end_time,
		G.completed

		FROM GAUNTLET_SETS G
		WHERE G.set_id = @set_id






END
GO
PRINT N'Creating [dbo].[usp_getGauntletSetsByAccount]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE dbo.usp_getGauntletSetsByAccount
	@account_id int = null,
	@gauntlet_id int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    

	--ensure @account_id isn't null
	IF(@account_id IS NULL)
	BEGIN
		PRINT '@account_id CANNOT BE NULL'
		RETURN -1
	END

	--ensure @gauntlet_id isn't null
	IF(@gauntlet_id IS NULL)
	BEGIN
		PRINT '@gauntlet_id CANNOT BE NULL'
		RETURN -1
	END

	

	SELECT 
			GS.set_id,
			GS.account_id,
			GS.gauntlet_id,
			GS.num_reps,
			GS.start_time,
			GS.end_time,
			GS.completed
	FROM GAUNTLET_SETS GS
	WHERE	GS.account_id = @account_id
	AND		GS.gauntlet_id = @gauntlet_id
	ORDER BY GS.set_id ASC

	

END
GO
PRINT N'Creating [dbo].[usp_newSet]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_newSet]
	@account_id int = null,
	@gauntlet_id int = null


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--verify @account_id
	IF(@account_id is null)
	BEGIN
		PRINT '@account_id CANNOT BE NULL'
		RETURN -1
	END

	--verify @gauntlet_id
	IF (@gauntlet_id is null)
	BEGIN
		PRINT '@gauntlet_id CANNOT BE NULL'
		RETURN -1
	END

	--verify account exists
	IF (SELECT COUNT(*) FROM ACCOUNTS WHERE id = @account_id) = 0
	BEGIN
		PRINT 'NO ID ' + Convert(nvarchar(10), @account_id) + ' EXISTS IN ACCOUNTS TABLE'
		RETURN -1
	END

	--verify gauntlet exists
	IF (SELECT COUNT(*) FROM GFIT_GAUNTLETS WHERE id = @gauntlet_id) = 0
	BEGIN
		PRINT 'NO ID ' + CONVERT(NVARCHAR(10), @gauntlet_id) + ' EXISTS IN GFIT_GAUNTLETS TABLE'
		RETURN -1
	END


	--verify that gantlet hasn't been completed
	DECLARE @repsDone int;
	SELECT @repsDone = SUM(num_reps) FROM GAUNTLET_SETS
		WHERE gauntlet_id = @gauntlet_id
		AND   account_id = @account_id
    

	IF(@repsDone >= (SELECT reps FROM GFIT_GAUNTLETS WHERE id = @gauntlet_id))
	BEGIN
		PRINT 'ACCOUNT ' + @account_id + ' HAS ALREADY COMPLETED GANTLET ' + @gauntlet_id
		RETURN -2
	END



	--check if they already have a new set created
	--perhaps, the refreshed a page or left the browser
	--if they do, return it

	IF((SELECT COUNT(*) FROM GAUNTLET_SETS GS
		WHERE	GS.account_id = @account_id
		AND		GS.gauntlet_id = @gauntlet_id
		AND		GS.completed = 0) <> 0) 
	BEGIN

		DECLARE @last_set_id int = null
		
		SELECT @last_set_id = set_id
			FROM GAUNTLET_SETS GS
			WHERE	GS.account_id = @account_id
			AND		GS.gauntlet_id = @gauntlet_id
			AND		GS.completed = 0

		EXEC usp_getGauntletSetById @set_id = @last_set_id

		RETURN @@ERROR
	END










	--make a new set and return it

	DECLARE @set_id int;
	SET @set_id = 0;

	IF(@repsDone > 0)
	BEGIN
		SELECT @set_id = MAX(set_id) FROM GAUNTLET_SETS 
			WHERE account_id = @account_id
			AND   gauntlet_id = @gauntlet_id
	END

	BEGIN TRANSACTION

		INSERT INTO GAUNTLET_SETS
		(set_id, account_id, gauntlet_id)
		VALUES
		(@set_id, @account_id, @gauntlet_id)


		SELECT 
			G.set_id,
			G.account_id,
			G.gauntlet_id,
			G.num_reps,
			G.start_time,
			G.end_time,
			G.completed

			FROM GAUNTLET_SETS G
			WHERE	G.set_id = (SELECT MAX(set_id) FROM GAUNTLET_SETS G2
								WHERE G2.account_id = @account_id
								AND G2.gauntlet_id = @gauntlet_id)
			AND		G.account_id = @account_id
			AND		G.gauntlet_id = @gauntlet_id


	COMMIT TRANSACTION


END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ACCOUNT_HAS_OAUTH] WITH CHECK CHECK CONSTRAINT [FK_ACCOUNT_HAS_OAUTH_ACCOUNTS];

ALTER TABLE [dbo].[ACCOUNT_HAS_OAUTH] WITH CHECK CHECK CONSTRAINT [FK_ACCOUNT_HAS_OAUTH_OAUTH_PROVIDERS];

ALTER TABLE [dbo].[GAUNTLET_SETS] WITH CHECK CHECK CONSTRAINT [FK_GAUNTLET_SETS_ACCOUNTS];

ALTER TABLE [dbo].[GAUNTLET_SETS] WITH CHECK CHECK CONSTRAINT [FK_GAUNTLET_SETS_GFIT_GAUNTLETS];


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
