@model gFit.Models.Composite.GauntletParticipation

@{
    ViewBag.Title = "TakeGauntlet";
}

@section BackButton{
data-add-back-btn="true"
}

@section Content
{


    <div class="timer-block">

        
        <span class="minutes" data-bind="text: minutes"></span>:<span class="seconds" data-bind="text: seconds"></span>

    </div>


    @using (Html.BeginForm("DoSetPostBack", "Gauntlet", FormMethod.Post, new { id = Model.Gauntlet.Id }))
    {
            
        @Html.Hidden("id", @Model.Gauntlet.Id)
        @Html.AntiForgeryToken()
        <ul data-role="listview" data-inset="true">
            <li data-role="list-divider">Hurry! Do some @Model.Gauntlet.Excercise!</li>
            <li>Reps Left: @Model.RepsLeft</li>
            <li data-role="fieldcontain" data-inline="false">
                <label for="reps" style="margin-right: 10px;">Reps This Set</label>


                <input type="range" 
                    data-inline="false"
                    name="numReps" 
                    id="repsSlider" 
                    min="1" 
                    max="@Model.RepsLeft" 
                    data-highlight="true"
                    value="1">
            </li>
            <li>


                <button type="submit" data-inline="true">Submit</button>


            </li>


        </ul>
    }




}

@section Scripts
{
    <script>

        


        function AppViewModel() {

            var _dummy = ko.observable();

            var startDate = new Date("@Model.IncompleteSet.StartTime");

            this.minutes = ko.observable();
            this.seconds = ko.observable();


            this.minutes = ko.computed(function () {
                _dummy();
                return Math.floor((new Date().getTime() - startDate.getTime()) / (1000 * 60));
            }, this);


            this.seconds = ko.computed(function () {
                _dummy();
                return Math.floor(((new Date().getTime() - startDate.getTime()) / (1000)) % 60);
            }, this);
            

            this.poke = function () {
                _dummy.notifySubscribers();
            };


        }

        var vm = new AppViewModel();

        setInterval(function () {
            vm.poke();
        }, 1000);

        // Activates knockout.js        
        ko.applyBindings(vm);
        //ko.applyBindings(new AppViewModel());


        //function DoSetViewModel() {
        //    startTime: ko.observable();
        //    timerValue: ko.observable();
        //}

        //DoSetViewModel.timerValue("Hello World");

        //ko.applyBindings(new DoSetViewModel());



    </script>

    
}
